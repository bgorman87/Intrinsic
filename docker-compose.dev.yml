services:
  express-app:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        BACKEND_PORT: ${BACKEND_PORT}
    depends_on:
      - db
    environment:
      - NODE_ENV=development
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - SITE_URL=${SITE_URL}
      - BACKEND_PORT=${BACKEND_PORT}
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    networks:
      - backend-network

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - ~/Documents/stocks.csv:/data/stocks.csv
    networks:
      - backend-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    working_dir: /app
    command: npm run dev
    env_file:
      - .env.dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - express-app
    networks:
      - frontend-network

volumes:
  pgdata:

networks:
  frontend-network:
  backend-network:
